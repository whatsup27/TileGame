<html>
<head>
<title>Tiles Game</title>
</head>
<body id = "body" onload = "createGame()">
<canvas id = "canvas" width = "500px" height = "500px" style = "border-color:black; position:relative; border-width:10px; border-style:solid;display:block; ">
 </canvas>
 
<script>
var templayer = 0;
var zoomsize = 1;
var x,y;
var ctx = canvas.getContext("2d");
var layer = 0;
var code = [];
var clc = []
var empty = false;
var select = 0;
var squaresize = 50 / zoomsize;
var maxspawn = 0;
var currentindex = 0;
var totalsections = 1;
var size = 1;
var sectionindex = [];
var constantsize = 0;
var gradienttype = [];
var locktype = [];
var encryptedcode = "";
var b = 0;
var i;
var pos;
var auto = false;

function saveCode() {
//Compress code into symbols and letters
//Create a loop to generate symbols based on val
//(U#@&(@&#(&@(&#@()))))
var t = 0;
var lastnum = "";
var currentnum = "";
var val = 0;
var filter = true;
var val2;
tempcode = sectionindex.join("");

while (filter === true) {
    
}
}

function loadCode() {
//Decompress encryptedcode into code 
}


function createGame() {
 emptySect(sectionindex)
 code[layer] = sectionindex;
 
}
function emptySect(target) {

 for (i = 0; i < 100; i++) {
     target[i] = 0;
 }
 return target;
}
function updateSection(dir) {
   //Fix Layer
if (b === 0) {
  x = 0;
  y = 0;

 sectionindex = [];
 
 if (dir === "u") {
     
code[layer] = clc;
     clc = [];
sectionindex = [];
     if (code[layer + 1] !== undefined) {
         clc = code[layer + 1];
         sectionindex = clc[currentindex]
  
     }
     else {
         empty = true
     }
layer++;
 }
 else if (dir === "d") {
   
    code[layer] = clc;
     clc = [];
     clc = code[layer - 1];
 
   sectionindex = clc[currentindex]
layer--
 }
if (empty === false) {
       updateBoard(sectionindex)
}
else {
for (i = 0; i < totalsections; i++) {
sectionindex = [];
emptySect(sectionindex);
clc[i] = sectionindex;

}
}

code[layer] = clc;
clc[currentindex] = sectionindex;
sectionindex = clc[currentindex];

tileDepth()
  empty = false
}
}
function tileDepth() {
   var cdc = [];
  x = 0;
   y = 0;
   pos = 0;
 var rate = 0.20;
  var max = 100 * layer;
  var subsec = [];
  
  var dep =  rate * layer;
    var level = 0;
  
     for (i = 0; i < max; i++) {
      
  
     if (pos === 0) {
         if (level <= layer) {
            
         subsec = [];
                   cdc = [];
          cdc = code[level];
       subsec = cdc[currentindex];
 
         }
     }
          if (dep <= 1) {
             ctx.globalAlpha = 1 - dep;
          }
       
          else {
              ctx.globalAlpha = 0
          }
       
           if (sectionindex[pos] === 0 && subsec[pos] !== 0) {
           
            ctx.clearRect(x,y,squaresize, squaresize)
          
           }
      switch (subsec[pos]) {
          
             case 1:
                 
                     ctx.fillStyle = "red";
                 break;
              
                 case 2:
                         ctx.fillStyle = "orange";
                     break;
                  
                     case 3:
                             ctx.fillStyle = "yellow";
                         break;
     }
     if (subsec[pos] !== 0) {
        
      ctx.fillRect(x,y,squaresize,squaresize);
     }
     
           if (x === squaresize * 9) {
               if (y === squaresize * 9) {
                   level++
 
                pos = 0
                   y = 0
                 x = 0;
                   dep -= rate;
              
               }
            
               else {
         y += squaresize;
           pos++;
               }
         x = 0;
     }
  
     else {
         x += squaresize;
           pos++;
     }
   
 
     
     }
     ctx.globalAlpha = 1;
}
function addSections(dir) {
 if (b === 0) {
 var clcold = clc;
clc = [];
 size += 2;
 constantsize += 1;
 sectionindex2 = sectionindex;

  var multiply = size * constantsize;
  var middle = multiply + constantsize;
  totalsections = size * size;
var clcempty = [];
var l = 0;
var s = 0;

var dec = 0;
var limit = 0;
for (s = 0; s <= layer; s++) {
    
    if (layer > 0) {
        clcold = code[s];
    }
    
    for (currentindex = 0; currentindex < totalsections; currentindex++) {
        clcempty = [];
        if (currentindex > size && currentindex < totalsections - size - 1 && limit < size - 2) {
            clc[currentindex] = clcold[l];
   
            l++;
            limit++;

        }
 
        else {
            if (dec == 1) {
                limit = 0;
                dec = 0;
            }
     
            else {
                dec++;
            }
            emptySect(clcempty);
            clc[currentindex] = clcempty;
        }
      
    }

    code[s] = clc;
    if (s < layer) {
        clcold = []
        clc = [];
        l = 0;
    }

}

currentindex = middle;
sectionindex = clc[currentindex];
}
}
function moveSection(dir) {
  //To switch secton  indexes to move along the layer
   if (b === 0) {
  if (dir == "l") {
        clc[currentindex] = sectionindex;
     currentindex--
    sectionindex = clc[currentindex];
  }
  else if (dir == "r") {
           clc[currentindex] = sectionindex;
      currentindex++
   sectionindex = clc[currentindex];
  }
  else if (dir == "u") {
           clc[currentindex] = sectionindex;
       currentindex -= size
     sectionindex = clc[currentindex];
  }
  else if (dir == "d") {
           clc[currentindex] = sectionindex;
       currentindex += size;
     sectionindex = clc[currentindex];
  }
 updateBoard(sectionindex)
    }
}
function showBoard() {
  ctx.clearRect(0,0,500,500)
 //Deal with this please future me?
 //Fix placement system

  x = 0;
 y = 0;
 var subsection = [];
 var subindex = 0;
 var index = 0;
 var ts = 500 / size;
 var xbase = 0;
 var ybase = 0;
  var sectionsize = 500 / size;
  var sx = 1;
  var sy = 1;
  var dx = 0;
  var dy = 0;
 var tempclc = [];
 
 tempclc = code[templayer];
 var n = 0;
 var sec = 0;
 var subsection = [];
 var replace = true;
 
 while (n < totalsections) {
     if (replace === true) {
         if (n % size === 0 && size > 1 && n > 0) {
           
                 ybase =  sectionsize * sy;
                 if (sy < size) {
         sy++;
      
                 }
             y = ybase
       
      
             xbase = 0;
             x = 0;
             sx = 1;
         }
      
         else if (n > 0) {
            // alert(sectionsize * sx)
               xbase = sectionsize * sx;
                if (sx < size) {
         sx++;
                }
             y = ybase;
             x = xbase;
         }
      
         dx = 0;
         dy = 0;
      
     subsection = tempclc[n];
     replace = false
     }
   ctx.clearRect(x,y,squaresize,squaresize)
   switch (subsection[sec]) {
          
             case 1:
                 
                     ctx.fillStyle = "red";
                 break;
              
                 case 2:
                         ctx.fillStyle = "orange";
                     break;
                  
                     case 3:
                             ctx.fillStyle = "yellow";
                         break;
     }
     if (subsection[sec] !== 0) {
      ctx.fillRect(x,y,squaresize,squaresize);
     }
     if (sec === 99) {
      
         sec = 0;
     
         subsection = [];
         replace = true;
         n++;
     }
  
 else {
     sec++;
     if (dx > 8) {
         x = xbase;
         dx = 0;
         y += squaresize;
         dy++;
     }
  
     else {
         dx++;
         x += squaresize;
     }
 }
  }
}

function updateBoard(array) {
 // alert(array)
   pos = 0;

   x = 0;
   y = 0;
   var xbase = 0;
   var ybase = 0;
 //If zoomsize greater than 1, load all of the sections by the zoomsize
   for (i = 0; i < 100 * zoomsize * zoomsize; i++) {
   
      if (i % 100 === 0) {
          pos = 0;
          if (zoomsize > 1) {
              if (i % zoomsize === 0 && i > 0) {
ybase += squaresize * 10;
xbase = 0;
              }

              else {
                  xbase += squaresize * 10;
              }
          }
          x = xbase;
          y = ybase;

      }
    
     switch (array[pos]) {
          
             case 1:
                 
                     ctx.fillStyle = "red";
                 break;
              
                 case 2:
                         ctx.fillStyle = "orange";
                     break;
                  
                     case 3:
                             ctx.fillStyle = "yellow";
                         break;
     }
     if (array[pos] !== 0) {
      ctx.fillRect(x,y,squaresize,squaresize);
     }
     else {
         ctx.clearRect(x,y,squaresize,squaresize);
     }
  
      if (x === squaresize * 9) {
         y += squaresize;
         x = xbase;
     }
  
     else {
         x += squaresize;
     }
   pos++
  
 }
    tileDepth()
}
function gradientTile(pos, type, x,y) {
 var left = clc[pos - 1];
  if (left > 3) {
     left = 0
 }
  var right = clc[pos + 1];
   if (right > 3) {
     right = 0
 }
  var up = clc[pos - 10];
   if (up > 3) {
     up = 0
 }
  var down = clc[pos + 10];
   if (down  > 3) {
     down = 0
 }
if (up !== down && gradienttype[pos] !== 1) {
type = 1
}
else if (up === right && down === left && up !== left && gradienttype[pos] !== 2) {
  type = 2
}
else if (up === left && down === right && up !== right && gradienttype[pos] !== 3) {
  type = 3
}
else if (left !== right && gradienttype[pos] !== 4) {
  type = 4
}
else if (up === down && left === right && up !== left && gradienttype[pos] !== 5) {
  type = 5
}
else if (up) {
  type = 6
}
else {
  alert("You cannot place this tile here. Change the surrounding tiles first!")
 type = 0
}
gradienttype[pos] = type;
alert(type)
}

function addTile(x,y) {
//alert(squaresize)
//Add mutiple additions to multiple sections
var subarray = [];
var totalsize = 500 / zoomsize;

 var num = 0;
 
 var min = 0;
 var max = 51/zoomsize;
 var squarerow = 20 * zoomsize;
 for (num = 0; num < squarerow;num++)  {
     if (num < squarerow / 2) {
     
             if (x < max && x >= min) {
                 x = min;
             }
         
     }
  
     else {
       if (num === squarerow / 2) {
          min = 0;
         max = 51 /zoomsize;
       }
          
        
     
             if (y < max && y >= min) {
                 y = min;
             }
         
     }
      min += squaresize;
                 max += squaresize;
 }
 //alert("X: " + x + " Y: " + y);
 if (zoomsize > 1) {
//Get X and Y and divide them by the square size

//Start a for loop for checking the size points


}


 else {
     subarray = sectionindex;
 }

  var xi = x / squaresize;
  var yi = y/ squaresize * 10
  var pos = xi + yi;     
 switch (select) {
     case 0:
      
            ctx.clearRect(x,y,squaresize,squaresize)
          subarray[pos] = 0
         break;
      
         case 1:
           
         
              subarray[pos] = 1
             break;
          
             case 2:
                
              
                    subarray[pos] = 2
                 break;
              
                 case 3:
                 
                   
                        subarray[pos] = 3
                        break;
                     
                     
                         
                            case 5:
                               
        gradientTile(pos, gradienttype[pos],x,y)
         subarray[pos] = 5;
         break;
      
         case 6:
            
     
         subarray[pos] = 6;
         break;
      
         case 7:
           
    
      
 }
if (zoomsize > 1) {
//Determine the section with x and y values
}

else {
    sectionindex = subarray
}
 clc[currentindex] = sectionindex;
 code[layer] = clc;
updateBoard(sectionindex)
 ctx.globalAlpha = 1;
}
window.onmousemove = function(e) {
  x = e.clientX - 15;
 y = e.clientY - 15;
 if (auto === true && b === 0) {
 
     addTile(x,y)
  
   
 }
}
canvas.onclick = function(e) {
    
    x = e.clientX - 15;
  y = e.clientY - 15;
 if (auto === false && b === 0) {
     addTile(x,y)
 }
}
 
window.onresize = function(e) {
}
 
window.onkeydown = function(e) {
    switch (e.keyCode) {
   
        case 32:
            if (auto === false) {
        auto = true
            }
         
            else {
                auto = false;
            }
           break;
     
        case 37:
        if (select > 0 && b === 0) {
            select--
        }
            break;
         
            case 38:
          if (b === 0) {
            updateSection("u")
          }
          else {
              templayer++;
              showBoard()
          }
            break;
         
            case 39:
                if (select < 8 && b === 0) {
              select++
                }
                break;
              
                case 40:
                   if (layer > 0 && b === 0) {
                 
                       updateSection("d")
                   }
                   else if (b === 1 && templayer > 0) {
                       templayer--;
                       showBoard()
                   }
                   break;
                
                   case 65:
                       //LEFT
                   
                       if (currentindex - 1 >= 0 && currentindex % size > 0) {
                           moveSection("l")
                       }
                    
                        else {
                           addSections("l");
                       }
                       break;
                
                   case 67:
                    //C
                    alert("h")
                    saveCode()
                    
                       break;
                
                    case 68:
                    
                     //D
                         if (currentindex + 1 < totalsections && currentindex % size < size - 1) {
                           moveSection("r")
                       }
                    
                       else {
                           addSections("r");
                       }
                       break;
                           
                  
                
                   case 73:
                   //I
                     break;
                
                   case 74:
                      //J
                       break;
                    
                       case 75:
                           //K
                           alert(b)
                           if (b === 0 && size > 1) {
                                squaresize = squaresize / size
                               templayer = layer;
b++
                        showBoard()
                       
                           }
                        
                           else {
                               
                               squaresize = 50 / zoomsize;
                              
                               updateBoard(sectionindex)
                               b = 0;
                           }
                            break;
                       case 77:
               //M
                   break;
                     case 82:
                         //R
                          break;
                       
                          case 83:
                              //S
                               if (currentindex + size < totalsections) {
                           moveSection("d")
                       }
                    
                       else {
                           addSections("d");
                       }
                              break;
                      
                         case 84:
                       
                          break;
                       
                          case 87:
                              //W
                               if (currentindex - size >= 0) {
                           moveSection("u")
                       }
                    
                       else {
                           addSections("u");
                       }
    }
 
 
     
};
</script>
</body>
</html>
 
 

